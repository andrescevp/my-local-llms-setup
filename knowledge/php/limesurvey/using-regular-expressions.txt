<languages /> 
__TOC__

Regular Expressions must start and finish with a forward slash ("/"). You can find a good library of regular expressions at http://www.regexlib.net/. These patterns will almost always work if they are surrounded by forward slashes.

To test your regex you can [https://regex101.com/ use this regex tester].

{{Note|To improve this wiki section, we kindly ask you to add your successfully tested regular expression(s) to provide a better understanding of this feature to the new LimeSurvey (potential) users.}}

{{Alert|title=Attention|text= Please note that all the below examples are written on one line!}}


=Important: Regular Expressions in conditions=


Note that when using regular expressions in the condition editor, do NOT include the beginning and ending slash.


=Email validation=


Update (12/2018): Since these days domain names cannot only hold special characters like “ü” but also use more than 3 characters as domain name like .''tech'' or .''company'', the below email regex only checks if “@” and “.” exists within the entered email address.
<source lang="html">
/^.+?@.+?\..+$/
</source>

If you want to validate one address per line, in a multiline long text field:
<source lang="html">
/^(((\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*(\r\n)?\n?)+)*)$/
</source>

At this outdated regex the domain name is limited to 3 characters which doesn't cover all available domains:
<source lang="html">
/^(\w[-._+\w]*\w@\w[-._\w]*\w\.\w{2,3})$/
</source>

=Postcodes=

==Australian postcodes:==

 <source lang="html">/^[0-9]{4}/</source>

==Brazilian postcodes==

 <source lang="html">/^[0-9]{2}\.[0-9]{3}-[0-9]{3}$/</source>

==Canadian postcodes==

 <source lang="html">/^[a-zA-Z]\d{1}[a-zA-Z](\-| |)\d{1}[a-zA-Z]\d{1}$/</source>

==US postal codes==

 <source lang="html">/^[0-9]{5}([- /]?[0-9]{4})?$/</source>

For the postal code to start with zero, use:

<source lang="html">/^[0-9]{5}(?:-[0-9]{4})?$/</source>

==UK postcodes==

 <source lang="html">/^[A-Z][A-Z]?[0-9][A-Z0-9]? ?[0-9][ABDEFGHJLNPQRSTUWXYZ]{2}$/i</source>

Note that this is not very exact, and a more exact validation is much more complex. For example, see [https://stackoverflow.com/questions/164979/uk-postcode-regex-comprehensive StackOverflow answer] and [https://en.wikipedia.org/wiki/Talk:Postcodes_in_the_United_Kingdom#Regular_Expressions Wikipedia] for more information.

==French postcodes== 

<source lang="html">/(^[0-8]\d\d{3}$)|(^9[0-5]\d{3}$)|(^97[1-6]\d{2}$)|(^98[46-8]\d{2}$)/</source>

The above expression is very precise and it will check whether or not the French Department exists (first two digits), including overseas Departments and overseas Territories (DOM-TOM).


=Phone numbers=


==US phone numbers==

<source lang="html">/^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$/</source>

or

 <source lang="html">/^[\(\)\.\- ]{0,}[0-9]{3}[\(\)\.\- ]{0,}[0-9]{3}[\(\)\.\- ]{0,}[0-9]{4}[\(\)\.\- ]{0,}$/</source>

This second option will match all phone Canadian and US phone numbers that include non-digit symbols including:

 <source lang="html"> . ( ) - (space)</source>

This will allow you to match phone numbers which resemble below:
*(555)555 5555
*555.555.5555
*555 555 5555
*(555)-555-5555
*555-555-5555
*555555555

==Australian phone numbers==

The following patterns match all various Australian mobile and landline phone numbers including with "+61" country prefix:
*(02) 9123 6535
*03 1234-5345
*0412 345 678
*+61 2 3456 789

But not:
* 234 3450 234
*a234 534 3432
*134567
*123456789013

Brackets, white space and hypens are ignored.

The 'Very precise:' versions listed here match against the first four or five digits in a number to ensure that they are valid Australian numbers.

The 'Not very precise:' only match against the first and second digit so may allow invaid numbers.

===All Australian phone numbers (mobile and landline - area code required)===

Very precise:

<source lang="html">/^\(?(?:\+?61|0)(?:(?:2\)?[ -]?(?:3[ -]?[38]|[46-9][ -]?[0-9]|5[ -]?[0-35-9])|3\)?(?:4[ -]?[0-57-9]|[57-9][ -]?[0-9]|6[ -]?[1-67])|7\)?[ -]?(?:[2-4][ -]?[0-9]|5[ -]?[2-7]|7[ -]?6)|8\)?[ -]?(?:5[ -]?[1-4]|6[ -]?[0-8]|[7-9][ -]?[0-9]))(?:[ -]?[0-9]){6}|4\)?[ -]?(?:(?:[01][ -]?[0-9]|2[ -]?[0-57-9]|3[ -]?[1-9]|4[ -]?[7-9]|5[ -]?[018])[ -]?[0-9]|3[ -]?0[ -]?[0-5])(?:[ -]?[0-9]){5})$/
</source>

Not very precise:

<source lang="html">/^(?:\+?61|0)[2-478](?:[ -]?[0-9]){8}$/</source>

===All Australian phone numbers (landlines only - area code required)===

Very precise:

<source lang="html">/^\(?(?:\+?61|0)(?:2\)?[ -]?(?:3[ -]?[38]|[46-9][ -]?[0-9]|5[ -]?[0-35-9])|3\)?(?:4[ -]?[0-57-9]|[57-9][ -]?[0-9]|6[ -]?[1-67])|7\)?[ -]?(?:[2-4][ -]?[0-9]|5[ -]?[2-7]|7[ -]?6)|8\)?[ -]?(?:5[ -]?[1-4]|6[ -]?[0-8]|[7-9][ -]?[0-9]))(?:[ -]?[0-9]){6}$/</source>

Not very precise:

<source lang="html">/^(?:\+?61|\(?0)[2378]\)?(?:[ -]?[0-9]){8}$/</source>

===New South Wales landline phone numbers (area code optional)===

Very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)2\)?[ -]?)?(?:3[ -]?[38]|[46-9][ -]?[0-9]|5[ -]?[0-35-9])(?:[ -]?[0-9]){6}$/</source>

Not very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)2\)?(?:[ -]?[0-9]){7}[0-9]$/</source>

===Victorian and Tasmanian landline phone numbers (area code optional)===

Very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)3\)?[ -]?)?(?:4[ -]?[0-57-9]|[57-9][ -]?[0-9]|6[ -]?[1-67])(?:[ -]?[0-9]){6}$/</source>

Not very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)3\)?(?:[ -]?[0-9]){7}[0-9]$/</source>

===Queensland landline phone numbers (area code optional)===

Very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)7\)?[ -]?)?(?:[2-4][ -]?[0-9]|5[ -]?[2-7]|7[ -]?6)(?:[ -]?[0-9]){6}$/</source>

Not very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)7\)?(?:[ -]?[0-9]){7}[0-9]$/</source>

===South Australia, Northern Territory, Western Australia landline phone numbers (area code optional)===

Very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)8\)?[ -]?)?(?:5[1-4]|6[0-8]|[7-9][0-9])$/</source>

Not very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)8\)?(?:[ -]?[0-9]){7}[0-9]$/</source>

===Australian mobile phone numbers only===

Very precise:

<source lang="html">/^(?:\+?61|0)4 ?(?:(?:[01] ?[0-9]|2 ?[0-57-9]|3 ?[1-9]|4 ?[7-9]|5 ?[018]) ?[0-9]|3 ?0 ?[0-5])(?: ?[0-9]){5}$/</source>

Not very precise:

<source lang="html">/^(?:\(?(?:\+?61|0)4\)?(?:[ -]?[0-9]){7}[0-9]$/</source>

==Belgian phone number==
 <source lang="html">/^((\+|00)32\s?|0)(\d\s?\d{3}|\d{2}\s?\d{2})(\s?\d{2}){2}$/</source>
==Belgian mobile phone number==
 <source lang="html">/^((\+|00)32\s?|0)4(60|[789]\d)(\s?\d{2}){3}$/</source>
==French phone number==
 <source lang="html">/^((\+|00)33\s?|0)[1-59](\s?\d{2}){4}$/</source>
==French mobile phone number==
 <source lang="html">/^((\+|00)33\s?|0)[67](\s?\d{2}){4}$/</source>
==Luxemburg phone number==
 <source lang="html">/^((\+|00\s?)352)?(\s?\d{2}){3,4}$/</source>
==Luxemburg mobile phone number==
 <source lang="html">/^((\+|00\s?)352)?\s?6[269]1(\s?\d{3}){2}$/</source>
=German marks (with optional plus or minus)=
 <source lang="html">/^[1-6]{1}[\+|\-]?$/</source>


=Age validation=


Example: Age 20-99
 <source lang="html">/([2-9][0-9])/</source>

Example: Age 18-35
 <source lang="html">/(1[8-9]|2[0-9]|3[0-5])/</source>

Example: Age 19-65
 <source lang="html">/^(1[8-9]|[2-5][0-9]|6[0-5])$/</source>


=Number validation= 


==Numbers from 1 to 99999==
 <source lang="html">/^([1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9])$/</source>
 <source lang="html">/^[1-9][0-9]{0,4}$/ does the same as above but should run a little faster</source>
==Numbers from 1 to 999, 1.000 to 999.999 to 999.999.999==
 <source lang="html">/^[1-9][0-9]{0,2}(?:\.[0-9]{3}){0,2}$/</source>
Accepts numbers from 1 to 999, 1.000 to 999.999 to 999.999.999 but
rejects numbers like 999.1.1 , 94.22.22, 999.1.22, 999.11.1, 999.1.333

==Number validation with optional decimal (for price)==
Accepts numbers from 0 to 199, with 2 decimal optional:
 <source lang="html">/^([1][0-9][0-9]|[1-9][0-9]|[0-9])((\.)[0-9][0-9])?$/</source>

==Number validation with thousand separator==
Space as separator, no minus
 <source lang="html">/^(?!0)\d{1,3}(\ \d{3})*$/</source>
Dot as separator, minus allowed
 <source lang="html">/^-?(?!0)\d{1,3}(\.\d{3})*$/</source>

It forces two decimal points and accepts numbers from 1.00 to 999,999,999.00 with an optional comma delimiting thousands/millions
including all of the following: 1.00, 1,000.00, 12,345.67, 12345,02, 123,456,468.00, 1234566.00, 123456789.00
but not 1,23.00, 12,3.4 or 1234,43.04
 <source lang="html">/^[1-9][0-9]{0,2}(?:,?[0-9]{3}){0,3}\.[0-9]{2}$/</source>
 
Similar to the above: Forces two decimal points but accepts a "0" before decimal separator ",".
 <source lang="html">/[0-9]{0,2}(?:,?[0-9]{3}){0,3}\.[0-9]{2}$/</source>

Same as above, but the two decimal points are optional:
<source lang="html">/^[1-9][0-9]{0,2}(?:,?[0-9]{3}){0,3}(?:\.[0-9]{2})?$/ </source>

==Month (1-12)==

If you want to ask for the month a person was born you can validate the input as follows:

 <source lang="html">/^[0]*[1-9]$|^[0]*1[0-2]$/</source>

=Minimum width (set to 3 in this example)=


 <source lang="html">/^.{3,}$/</source>


=Currency=


==US currency (dollar sign and cents optional)==

 <source lang="html">/^\$?\d+(\.(\d{2}))?$/</source>

Check for comma usage:
<source lang="html">/^\$?\d{1,3}(\d+(?!,))?(,\d{3})*(\.\d{2})?$/</source>

==Swiss price==

A number with two decimal numbers after the decimal point of which the last one is either a 5 or a 0:

 <source lang="html">/^(\d+)(\.\d(05)?)?$/</source>


=Validate score=


==1-10==

 <source lang="html">/^[1-9]{1}$|^10$/</source>

==1-100==

 <source lang="html">/^[1-9]?[0-9]{1}$|^100$/</source>


=Text validation=


The [[Question type - Multiple short text|multiple short text question type]] doesn't support minimum or maximum answers at the moment. One way around this is to use a [[Question type - Long free text|long free text question type]] with a regular expression.

The below expression tests for at least one word per line for at least 3 lines and no more than 10 lines:

 <source lang="html">/(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+)*)(?:[,.;:?!& \n\r]?(?:\n|\r|\n\r|\r\n)(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+)*)){2,10}/is</source>

If you want, say five words per line, you could change the first and last star/asterisk to {4,}:

<source lang="html">/(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+){4,})(?:[,.;:?!& \n\r]?(?:\n|\r|\n\r|\r\n)(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+){4,})){2,10}/is</source>

If you wanted one or more words per line (between line 1 and line 5), you can change the content located within the last curly braces to '''0,4''' (note you use 0 because you're already matching the first line).

 <source lang="html">/(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+)*)(?:[,.;:?!& \n\r]?(?:\n|\r|\n\r|\r\n)(?:[^,.;:?!& \n\r]+(?: [^,.;:?!& \n\r]+)*)){0,4}/is</source>

==Word count==

 The following restricts the number of words allowed to a minimum of 1 and a maximum of 200:

<source lang="html">/^[-\w]+(?:\W+[-\w]+){0,199}\W*$/</source>

 To increase the minimum change the zero part of {0,199}.

To increase or decrease the maximum change the "199" part of {0,199}.

=Time validation=


There are a number of ways to write time formats. Some of the possible options are 12 hour or 24 hour, with seconds or without. Although it is an option to use the [[Question type - Date|date question type]] (it can also capture time) you can use the [[Question type - Short free text|short free text question type]] with one of the below validation regular expressions.

The following three validation strings test for 24 hour time (in order of appearances) without seconds, with optional seconds lastly with seconds required:

<source lang="html">/^(?:[01][0-9]|2[0-3]):[0-5][0-9]$/</source>

<source lang="html">/^(?:[01][0-9]|2[0-3]):[0-5][0-9](?::[0-5][0-9])?$/</source>

<source lang="html">/^(?:[01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/</source>

The following three match 12 hour time, as above with seconds, optional seconds and with seconds required:

<source lang="html">/^(?">00:[0-5][0-9] (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9] (?:[ap]m|[AP]M)|12:[0-5][0-9] (?:pm|PM))$/</source>

<source lang="html">/^(?:00:[0-5][0-9](?::[0-5][0-9])? (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9](?::[0-5][0-9])? (?:[ap]m|[AP]M)|12:[0-5][0-9](?::[0-5][0-9])? (?:pm|PM))$/</source>

<source lang="html">/^(?:00:[0-5][0-9]:[0-5][0-9] (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9]:[0-5][0-9] (?:[ap]m|[AP]M)|12:[0-5][0-9]:[0-5][0-9] (?:pm|PM))$/</source>

The following three match either 12 or 24 hour time as above with seconds, optional seconds and with seconds required:

<source lang="html">/^(?:(?:00:[0-5][0-9] (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9] (?:[ap]m|[AP]M)|12:[0-5][0-9] (?:pm|PM))|(?:[01][0-9]|2[0-3]):[0-5][0-9])$/</source>

<source lang="html">/^(?:(?:00:[0-5][0-9](?[0-5][0-9])? (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9](?[0-5][0-9])? (?:[ap]m|[AP]M)|12:[0-5][0-9](?[0-5][0-9])? (?:pm|PM))|(?:[01][0-9]|2[0-3]):[0-5][0-9](?[0-5][0-9])?)$/</source>

<source lang="html">/^(?:(?:00:[0-5][0-9]:[0-5][0-9] (?:am|AM)|(?:0[1-9]|1[01]):[0-5][0-9]:[0-5][0-9] (?:[ap]m|[AP]M)|12:[0-5][0-9]:[0-5][0-9] (?:pm|PM))|(?:[01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])$/</source>

=US states=


To validate for one state use the following (example is Texas):
*TX uppercase only: <source lang="html">/^(TX)$/</source>
*tx lowercase only: <source lang="html">/^(tx)$/</source>
*TX upper or lowercase: <source lang="html">/^([T|t][X|x])$/</source>


=Profanity Filter=


To filter profanity words from an answer:

 <source lang="html">/^(?i)((?!\bENTERPROFANITYHERE\b).)*$(?-i)/</source>

Replace "ENTERPROFANITYHERE" with your bad word.

The \b will allow passing of words such as "assassination" and "hello" if you enter "ass" or "hell" as your profanity word. This also works if you are trying to omit other words, names etc. from answers.


=Helpful links=


In the beginning of this wiki section, we recommend you to use https://regex101.com/ to test/create regular expressions. You can also use https://www.regextester.com/ to create expressions in case you are unhappy about the first option. You can use https://extendsclass.com/regex-tester.html to visualize regular expressions.
